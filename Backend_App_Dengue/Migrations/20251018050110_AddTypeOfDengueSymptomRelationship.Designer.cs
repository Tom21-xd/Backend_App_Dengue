// <auto-generated />
using System;
using Backend_App_Dengue.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend_App_Dengue.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251018050110_AddTypeOfDengueSymptomRelationship")]
    partial class AddTypeOfDengueSymptomRelationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_CASO")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_CASO");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DIRECCION_CASOREPORTADO")
                        .HasAnnotation("Relational:JsonPropertyName", "DIRECCION_CASOREPORTADO");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_CASOREPORTADO")
                        .HasAnnotation("Relational:JsonPropertyName", "FECHA_CASOREPORTADO");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("DESCRIPCION_CASOREPORTADO")
                        .HasAnnotation("Relational:JsonPropertyName", "DESCRIPCION_CASOREPORTADO");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHAFINALIZACION_CASO")
                        .HasAnnotation("Relational:JsonPropertyName", "FECHAFINALIZACION_CASO");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_HOSPITAL")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_HOSPITAL");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("ESTADO_CASO")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_CASO");

                    b.Property<int?>("MedicalStaffId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_PERSONALMEDICO")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_PERSONALMEDICO");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_PACIENTE")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_PACIENTE");

                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_ESTADOCASO")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_ESTADOCASO");

                    b.Property<int>("TypeOfDengueId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_TIPODENGUE")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_TIPODENGUE");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("MedicalStaffId");

                    b.HasIndex("PatientId");

                    b.HasIndex("StateId");

                    b.HasIndex("TypeOfDengueId");

                    b.ToTable("casoreportado");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.CaseState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_ESTADOCASO")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_ESTADOCASO");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ESTADO_ESTADOCASO")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_ESTADOCASO");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE_ESTADOCASO")
                        .HasAnnotation("Relational:JsonPropertyName", "NOMBRE_ESTADOCASO");

                    b.HasKey("Id");

                    b.ToTable("estadocaso");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_MUNICIPIO")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_MUNICIPIO");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_DEPARTAMENTO")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_DEPARTAMENTO");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ESTADO_MUNICIPIO")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_MUNICIPIO");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE_MUNICIPIO")
                        .HasAnnotation("Relational:JsonPropertyName", "NOMBRE_MUNICIPIO");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("municipio");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_DEPARTAMENTO")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_DEPARTAMENTO");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ESTADO_DEPARTAMENTO")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_DEPARTAMENTO");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE_DEPARTAMENTO")
                        .HasAnnotation("Relational:JsonPropertyName", "NOMBRE_DEPARTAMENTO");

                    b.HasKey("Id");

                    b.ToTable("departamento");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.FCMToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_FCMTOKEN")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_FCMTOKEN");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_REGISTRO")
                        .HasAnnotation("Relational:JsonPropertyName", "FECHA_REGISTRO");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("FCM_TOKEN")
                        .HasAnnotation("Relational:JsonPropertyName", "FCM_TOKEN");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_ACTUALIZACION")
                        .HasAnnotation("Relational:JsonPropertyName", "FECHA_ACTUALIZACION");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_USUARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_USUARIO");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("fcmtoken");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_GENERO")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_GENERO");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ESTADO_GENERO")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_GENERO");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NOMBRE_GENERO")
                        .HasAnnotation("Relational:JsonPropertyName", "NOMBRE_GENERO");

                    b.HasKey("Id");

                    b.ToTable("genero");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_HOSPITAL")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_HOSPITAL");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DIRECCION_HOSPITAL")
                        .HasAnnotation("Relational:JsonPropertyName", "DIRECCION_HOSPITAL");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_MUNICIPIO")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_MUNICIPIO");

                    b.Property<string>("ImageId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("IMAGEN_HOSPITAL")
                        .HasAnnotation("Relational:JsonPropertyName", "IMAGEN_HOSPITAL");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("ESTADO_HOSPITAL")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_HOSPITAL");

                    b.Property<string>("Latitude")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LATITUD_HOSPITAL")
                        .HasAnnotation("Relational:JsonPropertyName", "LATITUD_HOSPITAL");

                    b.Property<string>("Longitude")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LONGITUD_HOSPITAL")
                        .HasAnnotation("Relational:JsonPropertyName", "LONGITUD_HOSPITAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("NOMBRE_HOSPITAL")
                        .HasAnnotation("Relational:JsonPropertyName", "NOMBRE_HOSPITAL");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("hospital");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_NOTIFICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_NOTIFICACION");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("CONTENIDO_NOTIFICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "CONTENIDO_NOTIFICACION");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_NOTIFICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "FECHA_NOTIFICACION");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("ESTADO_NOTIFICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_NOTIFICACION");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("LEIDA_NOTIFICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "LEIDA_NOTIFICACION");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_USUARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_USUARIO");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("notificacion");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Publication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_PUBLICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_PUBLICACION");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_PUBLICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "FECHA_PUBLICACION");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("DESCRIPCION_PUBLICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "DESCRIPCION_PUBLICACION");

                    b.Property<string>("ImageId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ID_IMAGEN")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_IMAGEN");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("ESTADO_PUBLICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_PUBLICACION");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("TITULO_PUBLICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "TITULO_PUBLICACION");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_USUARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_USUARIO");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("publicacion");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_ROL")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_ROL");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ESTADO_ROL")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_ROL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE_ROL")
                        .HasAnnotation("Relational:JsonPropertyName", "NOMBRE_ROL");

                    b.HasKey("Id");

                    b.ToTable("rol");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Symptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_SINTOMA")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_SINTOMA");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ESTADO_SINTOMA")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_SINTOMA");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("NOMBRE_SINTOMA")
                        .HasAnnotation("Relational:JsonPropertyName", "NOMBRE_SINTOMA");

                    b.HasKey("Id");

                    b.ToTable("sintoma");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.TypeOfBlood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_TIPOSANGRE")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_TIPOSANGRE");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ESTADO_TIPOSANGRE")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_TIPOSANGRE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("NOMBRE_TIPOSANGRE")
                        .HasAnnotation("Relational:JsonPropertyName", "NOMBRE_TIPOSANGRE");

                    b.HasKey("Id");

                    b.ToTable("tiposangre");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.TypeOfDengue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_TIPODENGUE")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_TIPODENGUE");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ESTADO_TIPODENGUE")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_TIPODENGUE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE_TIPODENGUE")
                        .HasAnnotation("Relational:JsonPropertyName", "NOMBRE_TIPODENGUE");

                    b.HasKey("Id");

                    b.ToTable("tipodengue");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.TypeOfDengueSymptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_TIPODENGUE_SINTOMA")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_TIPODENGUE_SINTOMA");

                    b.Property<int>("SymptomId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_SINTOMA")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_SINTOMA");

                    b.Property<int>("TypeOfDengueId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_TIPODENGUE")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_TIPODENGUE");

                    b.HasKey("Id");

                    b.HasIndex("SymptomId");

                    b.HasIndex("TypeOfDengueId", "SymptomId")
                        .IsUnique();

                    b.ToTable("tipodengue_sintoma");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_USUARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_USUARIO");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DIRECCION_USUARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "DIRECCION_USUARIO");

                    b.Property<int>("BloodTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_TIPOSANGRE")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_TIPOSANGRE");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_MUNICIPIO")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_MUNICIPIO");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("CORREO_USUARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "CORREO_USUARIO");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_GENERO")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_GENERO");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("ESTADO_USUARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_USUARIO");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("NOMBRE_USUARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "NOMBRE_USUARIO");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CONTRASENIA_USUARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "CONTRASENIA_USUARIO");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_ROL")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_ROL");

                    b.HasKey("Id");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GenreId");

                    b.HasIndex("RoleId");

                    b.ToTable("usuario");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Case", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.Hospital", "Hospital")
                        .WithMany("Cases")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend_App_Dengue.Data.Entities.User", "MedicalStaff")
                        .WithMany("CasesAsMedicalStaff")
                        .HasForeignKey("MedicalStaffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Backend_App_Dengue.Data.Entities.User", "Patient")
                        .WithMany("CasesAsPatient")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend_App_Dengue.Data.Entities.CaseState", "State")
                        .WithMany("Cases")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend_App_Dengue.Data.Entities.TypeOfDengue", "TypeOfDengue")
                        .WithMany("Cases")
                        .HasForeignKey("TypeOfDengueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hospital");

                    b.Navigation("MedicalStaff");

                    b.Navigation("Patient");

                    b.Navigation("State");

                    b.Navigation("TypeOfDengue");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.City", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.Department", "Department")
                        .WithMany("Cities")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.FCMToken", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.User", "User")
                        .WithMany("FCMTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Hospital", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.City", "City")
                        .WithMany("Hospitals")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Notification", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Publication", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.User", "User")
                        .WithMany("Publications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.TypeOfDengueSymptom", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.Symptom", "Symptom")
                        .WithMany("TypeOfDengueSymptoms")
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_App_Dengue.Data.Entities.TypeOfDengue", "TypeOfDengue")
                        .WithMany("TypeOfDengueSymptoms")
                        .HasForeignKey("TypeOfDengueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Symptom");

                    b.Navigation("TypeOfDengue");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.User", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.TypeOfBlood", "BloodType")
                        .WithMany("Users")
                        .HasForeignKey("BloodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend_App_Dengue.Data.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Backend_App_Dengue.Data.Entities.Genre", "Genre")
                        .WithMany("Users")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend_App_Dengue.Data.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BloodType");

                    b.Navigation("City");

                    b.Navigation("Genre");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.CaseState", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.City", b =>
                {
                    b.Navigation("Hospitals");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Department", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Genre", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Hospital", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Symptom", b =>
                {
                    b.Navigation("TypeOfDengueSymptoms");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.TypeOfBlood", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.TypeOfDengue", b =>
                {
                    b.Navigation("Cases");

                    b.Navigation("TypeOfDengueSymptoms");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.User", b =>
                {
                    b.Navigation("CasesAsMedicalStaff");

                    b.Navigation("CasesAsPatient");

                    b.Navigation("FCMTokens");

                    b.Navigation("Notifications");

                    b.Navigation("Publications");
                });
#pragma warning restore 612, 618
        }
    }
}
