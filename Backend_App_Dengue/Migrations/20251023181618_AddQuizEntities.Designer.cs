// <auto-generated />
using System;
using Backend_App_Dengue.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend_App_Dengue.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251023181618_AddQuizEntities")]
    partial class AddQuizEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_CASO")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_CASO");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DIRECCION_CASOREPORTADO")
                        .HasAnnotation("Relational:JsonPropertyName", "DIRECCION_CASOREPORTADO");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_CASOREPORTADO")
                        .HasAnnotation("Relational:JsonPropertyName", "FECHA_CASOREPORTADO");

                    b.Property<int>("CurrentDayOfIllness")
                        .HasColumnType("int")
                        .HasColumnName("DIA_ENFERMEDAD_ACTUAL")
                        .HasAnnotation("Relational:JsonPropertyName", "DIA_ENFERMEDAD_ACTUAL");

                    b.Property<int?>("CurrentPatientStateId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_ESTADO_PACIENTE_ACTUAL")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_ESTADO_PACIENTE_ACTUAL");

                    b.Property<int?>("CurrentTypeOfDengueId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_TIPODENGUE_ACTUAL")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_TIPODENGUE_ACTUAL");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("DESCRIPCION_CASOREPORTADO")
                        .HasAnnotation("Relational:JsonPropertyName", "DESCRIPCION_CASOREPORTADO");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHAFINALIZACION_CASO")
                        .HasAnnotation("Relational:JsonPropertyName", "FECHAFINALIZACION_CASO");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_HOSPITAL")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_HOSPITAL");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("ESTADO_CASO")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_CASO");

                    b.Property<int?>("LastEvolutionId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_ULTIMA_EVOLUCION")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_ULTIMA_EVOLUCION");

                    b.Property<int?>("MedicalStaffId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_PERSONALMEDICO")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_PERSONALMEDICO");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_PACIENTE")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_PACIENTE");

                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_ESTADOCASO")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_ESTADOCASO");

                    b.Property<int>("TypeOfDengueId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_TIPODENGUE")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_TIPODENGUE");

                    b.HasKey("Id");

                    b.HasIndex("CurrentPatientStateId");

                    b.HasIndex("CurrentTypeOfDengueId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("LastEvolutionId");

                    b.HasIndex("MedicalStaffId");

                    b.HasIndex("PatientId");

                    b.HasIndex("StateId");

                    b.HasIndex("TypeOfDengueId");

                    b.ToTable("casoreportado");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.CaseEvolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_EVOLUCION")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_EVOLUCION");

                    b.Property<int?>("ALT")
                        .HasColumnType("int")
                        .HasColumnName("TRANSAMINASAS_ALT")
                        .HasAnnotation("Relational:JsonPropertyName", "TRANSAMINASAS_ALT");

                    b.Property<int?>("AST")
                        .HasColumnType("int")
                        .HasColumnName("TRANSAMINASAS_AST")
                        .HasAnnotation("Relational:JsonPropertyName", "TRANSAMINASAS_AST");

                    b.Property<int>("CaseId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_CASO")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_CASO");

                    b.Property<string>("ClinicalObservations")
                        .HasColumnType("TEXT")
                        .HasColumnName("OBSERVACIONES_CLINICAS")
                        .HasAnnotation("Relational:JsonPropertyName", "OBSERVACIONES_CLINICAS");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_REGISTRO")
                        .HasAnnotation("Relational:JsonPropertyName", "FECHA_REGISTRO");

                    b.Property<int?>("DayOfIllness")
                        .HasColumnType("int")
                        .HasColumnName("DIA_ENFERMEDAD")
                        .HasAnnotation("Relational:JsonPropertyName", "DIA_ENFERMEDAD");

                    b.Property<bool>("DengueTypeChanged")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("CAMBIO_TIPO_DENGUE")
                        .HasAnnotation("Relational:JsonPropertyName", "CAMBIO_TIPO_DENGUE");

                    b.Property<bool>("DeteriorationDetected")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("EMPEORAMIENTO_DETECTADO")
                        .HasAnnotation("Relational:JsonPropertyName", "EMPEORAMIENTO_DETECTADO");

                    b.Property<int?>("DiastolicBloodPressure")
                        .HasColumnType("int")
                        .HasColumnName("PRESION_ARTERIAL_DIASTOLICA")
                        .HasAnnotation("Relational:JsonPropertyName", "PRESION_ARTERIAL_DIASTOLICA");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_MEDICO")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_MEDICO");

                    b.Property<DateTime>("EvolutionDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_EVOLUCION")
                        .HasAnnotation("Relational:JsonPropertyName", "FECHA_EVOLUCION");

                    b.Property<int?>("HeartRate")
                        .HasColumnType("int")
                        .HasColumnName("FRECUENCIA_CARDIACA")
                        .HasAnnotation("Relational:JsonPropertyName", "FRECUENCIA_CARDIACA");

                    b.Property<decimal?>("Hematocrit")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("HEMATOCRITO")
                        .HasAnnotation("Relational:JsonPropertyName", "HEMATOCRITO");

                    b.Property<decimal?>("Hemoglobin")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("HEMOGLOBINA")
                        .HasAnnotation("Relational:JsonPropertyName", "HEMOGLOBINA");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ESTADO_EVOLUCION")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_EVOLUCION");

                    b.Property<DateTime?>("NextAppointment")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("PROXIMA_CITA")
                        .HasAnnotation("Relational:JsonPropertyName", "PROXIMA_CITA");

                    b.Property<decimal?>("OxygenSaturation")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("SATURACION_OXIGENO")
                        .HasAnnotation("Relational:JsonPropertyName", "SATURACION_OXIGENO");

                    b.Property<string>("PatientRecommendations")
                        .HasColumnType("TEXT")
                        .HasColumnName("RECOMENDACIONES_PACIENTE")
                        .HasAnnotation("Relational:JsonPropertyName", "RECOMENDACIONES_PACIENTE");

                    b.Property<int>("PatientStateId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_ESTADO_PACIENTE")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_ESTADO_PACIENTE");

                    b.Property<int?>("Platelets")
                        .HasColumnType("int")
                        .HasColumnName("PLAQUETAS")
                        .HasAnnotation("Relational:JsonPropertyName", "PLAQUETAS");

                    b.Property<string>("PrescribedTreatment")
                        .HasColumnType("TEXT")
                        .HasColumnName("TRATAMIENTO_INDICADO")
                        .HasAnnotation("Relational:JsonPropertyName", "TRATAMIENTO_INDICADO");

                    b.Property<string>("ReportedSymptomsJson")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("SINTOMAS_REPORTADOS")
                        .HasAnnotation("Relational:JsonPropertyName", "SINTOMAS_REPORTADOS");

                    b.Property<string>("RequestedTests")
                        .HasColumnType("TEXT")
                        .HasColumnName("EXAMENES_SOLICITADOS")
                        .HasAnnotation("Relational:JsonPropertyName", "EXAMENES_SOLICITADOS");

                    b.Property<bool>("RequiresHospitalization")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("REQUIERE_HOSPITALIZACION")
                        .HasAnnotation("Relational:JsonPropertyName", "REQUIERE_HOSPITALIZACION");

                    b.Property<bool>("RequiresICU")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("REQUIERE_UCI")
                        .HasAnnotation("Relational:JsonPropertyName", "REQUIERE_UCI");

                    b.Property<int?>("RespiratoryRate")
                        .HasColumnType("int")
                        .HasColumnName("FRECUENCIA_RESPIRATORIA")
                        .HasAnnotation("Relational:JsonPropertyName", "FRECUENCIA_RESPIRATORIA");

                    b.Property<int?>("SystolicBloodPressure")
                        .HasColumnType("int")
                        .HasColumnName("PRESION_ARTERIAL_SISTOLICA")
                        .HasAnnotation("Relational:JsonPropertyName", "PRESION_ARTERIAL_SISTOLICA");

                    b.Property<decimal?>("Temperature")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("TEMPERATURA")
                        .HasAnnotation("Relational:JsonPropertyName", "TEMPERATURA");

                    b.Property<int>("TypeOfDengueId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_TIPODENGUE")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_TIPODENGUE");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_MODIFICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "FECHA_MODIFICACION");

                    b.Property<int?>("WhiteBloodCells")
                        .HasColumnType("int")
                        .HasColumnName("LEUCOCITOS")
                        .HasAnnotation("Relational:JsonPropertyName", "LEUCOCITOS");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("EvolutionDate");

                    b.HasIndex("PatientStateId");

                    b.HasIndex("TypeOfDengueId");

                    b.HasIndex("CaseId", "EvolutionDate");

                    b.ToTable("evolucion_caso");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.CaseState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_ESTADOCASO")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_ESTADOCASO");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ESTADO_ESTADOCASO")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_ESTADOCASO");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE_ESTADOCASO")
                        .HasAnnotation("Relational:JsonPropertyName", "NOMBRE_ESTADOCASO");

                    b.HasKey("Id");

                    b.ToTable("estadocaso");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_CERTIFICADO");

                    b.Property<int>("AttemptId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_INTENTO");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_EMISION");

                    b.Property<string>("PdfUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("URL_PDF_CERTIFICADO");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("PUNTUACION_OBTENIDA");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ESTADO_CERTIFICADO");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_USUARIO");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CODIGO_VERIFICACION");

                    b.HasKey("Id");

                    b.HasIndex("AttemptId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("VerificationCode")
                        .IsUnique();

                    b.ToTable("certificates");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_MUNICIPIO")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_MUNICIPIO");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_DEPARTAMENTO")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_DEPARTAMENTO");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ESTADO_MUNICIPIO")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_MUNICIPIO");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE_MUNICIPIO")
                        .HasAnnotation("Relational:JsonPropertyName", "NOMBRE_MUNICIPIO");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("municipio");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_DEPARTAMENTO")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_DEPARTAMENTO");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ESTADO_DEPARTAMENTO")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_DEPARTAMENTO");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE_DEPARTAMENTO")
                        .HasAnnotation("Relational:JsonPropertyName", "NOMBRE_DEPARTAMENTO");

                    b.HasKey("Id");

                    b.ToTable("departamento");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.FCMToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_FCMTOKEN")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_FCMTOKEN");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_REGISTRO")
                        .HasAnnotation("Relational:JsonPropertyName", "FECHA_REGISTRO");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("FCM_TOKEN")
                        .HasAnnotation("Relational:JsonPropertyName", "FCM_TOKEN");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_ACTUALIZACION")
                        .HasAnnotation("Relational:JsonPropertyName", "FECHA_ACTUALIZACION");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_USUARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_USUARIO");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("fcmtoken");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_GENERO")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_GENERO");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ESTADO_GENERO")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_GENERO");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NOMBRE_GENERO")
                        .HasAnnotation("Relational:JsonPropertyName", "NOMBRE_GENERO");

                    b.HasKey("Id");

                    b.ToTable("genero");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_HOSPITAL")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_HOSPITAL");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DIRECCION_HOSPITAL")
                        .HasAnnotation("Relational:JsonPropertyName", "DIRECCION_HOSPITAL");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_MUNICIPIO")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_MUNICIPIO");

                    b.Property<string>("ImageId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("IMAGEN_HOSPITAL")
                        .HasAnnotation("Relational:JsonPropertyName", "IMAGEN_HOSPITAL");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("ESTADO_HOSPITAL")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_HOSPITAL");

                    b.Property<string>("Latitude")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LATITUD_HOSPITAL")
                        .HasAnnotation("Relational:JsonPropertyName", "LATITUD_HOSPITAL");

                    b.Property<string>("Longitude")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LONGITUD_HOSPITAL")
                        .HasAnnotation("Relational:JsonPropertyName", "LONGITUD_HOSPITAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("NOMBRE_HOSPITAL")
                        .HasAnnotation("Relational:JsonPropertyName", "NOMBRE_HOSPITAL");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("hospital");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_NOTIFICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_NOTIFICACION");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("CONTENIDO_NOTIFICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "CONTENIDO_NOTIFICACION");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_NOTIFICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "FECHA_NOTIFICACION");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("ESTADO_NOTIFICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_NOTIFICACION");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("LEIDA_NOTIFICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "LEIDA_NOTIFICACION");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_USUARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_USUARIO");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("notificacion");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.PatientState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_ESTADO_PACIENTE")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_ESTADO_PACIENTE");

                    b.Property<string>("ColorIndicator")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("COLOR_INDICADOR")
                        .HasAnnotation("Relational:JsonPropertyName", "COLOR_INDICADOR");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPCION")
                        .HasAnnotation("Relational:JsonPropertyName", "DESCRIPCION");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ESTADO_ACTIVO")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_ACTIVO");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE_ESTADO_PACIENTE")
                        .HasAnnotation("Relational:JsonPropertyName", "NOMBRE_ESTADO_PACIENTE");

                    b.Property<int>("SeverityLevel")
                        .HasColumnType("int")
                        .HasColumnName("NIVEL_GRAVEDAD")
                        .HasAnnotation("Relational:JsonPropertyName", "NIVEL_GRAVEDAD");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("estado_paciente");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Publication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_PUBLICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_PUBLICACION");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DIRECCION")
                        .HasAnnotation("Relational:JsonPropertyName", "DIRECCION");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_CATEGORIA")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_CATEGORIA");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_CIUDAD")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_CIUDAD");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_PUBLICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "FECHA_PUBLICACION");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_DEPARTAMENTO")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_DEPARTAMENTO");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("DESCRIPCION_PUBLICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "DESCRIPCION_PUBLICACION");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_EXPIRACION")
                        .HasAnnotation("Relational:JsonPropertyName", "FECHA_EXPIRACION");

                    b.Property<string>("ImageId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ID_IMAGEN")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_IMAGEN");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("ESTADO_PUBLICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_PUBLICACION");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("FIJADA")
                        .HasAnnotation("Relational:JsonPropertyName", "FIJADA");

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("PUBLICADA")
                        .HasAnnotation("Relational:JsonPropertyName", "PUBLICADA");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("LATITUD")
                        .HasAnnotation("Relational:JsonPropertyName", "LATITUD");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("LONGITUD")
                        .HasAnnotation("Relational:JsonPropertyName", "LONGITUD");

                    b.Property<bool>("NotificationSent")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("NOTIFICACION_ENVIADA")
                        .HasAnnotation("Relational:JsonPropertyName", "NOTIFICACION_ENVIADA");

                    b.Property<DateTime?>("NotificationSentAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_ENVIO_NOTIFICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "FECHA_ENVIO_NOTIFICACION");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NIVEL_PRIORIDAD")
                        .HasAnnotation("Relational:JsonPropertyName", "NIVEL_PRIORIDAD");

                    b.Property<DateTime?>("ScheduledPublishDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_PUBLICACION_PROGRAMADA")
                        .HasAnnotation("Relational:JsonPropertyName", "FECHA_PUBLICACION_PROGRAMADA");

                    b.Property<bool>("SendPushNotification")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ENVIAR_NOTIFICACION_PUSH")
                        .HasAnnotation("Relational:JsonPropertyName", "ENVIAR_NOTIFICACION_PUSH");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("TITULO_PUBLICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "TITULO_PUBLICACION");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_USUARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_USUARIO");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("IsPinned");

                    b.HasIndex("Priority");

                    b.HasIndex("UserId");

                    b.ToTable("publicacion");

                    b.HasAnnotation("Relational:JsonPropertyName", "PUBLICACION");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.PublicationCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_CATEGORIA_PUBLICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_CATEGORIA_PUBLICACION");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("COLOR")
                        .HasAnnotation("Relational:JsonPropertyName", "COLOR");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPCION_CATEGORIA")
                        .HasAnnotation("Relational:JsonPropertyName", "DESCRIPCION_CATEGORIA");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ICONO")
                        .HasAnnotation("Relational:JsonPropertyName", "ICONO");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ESTADO_CATEGORIA")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_CATEGORIA");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE_CATEGORIA")
                        .HasAnnotation("Relational:JsonPropertyName", "NOMBRE_CATEGORIA");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("categoria_publicacion");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.PublicationComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_COMENTARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_COMENTARIO");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("CONTENIDO_COMENTARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "CONTENIDO_COMENTARIO");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_COMENTARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "FECHA_COMENTARIO");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ESTADO_COMENTARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_COMENTARIO");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_COMENTARIO_PADRE")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_COMENTARIO_PADRE");

                    b.Property<int>("PublicationId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_PUBLICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_PUBLICACION");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_USUARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_USUARIO");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PublicationId");

                    b.HasIndex("UserId");

                    b.ToTable("comentario_publicacion");

                    b.HasAnnotation("Relational:JsonPropertyName", "RESPUESTAS");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.PublicationReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_REACCION")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_REACCION");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_REACCION")
                        .HasAnnotation("Relational:JsonPropertyName", "FECHA_REACCION");

                    b.Property<int>("PublicationId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_PUBLICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_PUBLICACION");

                    b.Property<string>("ReactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TIPO_REACCION")
                        .HasAnnotation("Relational:JsonPropertyName", "TIPO_REACCION");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_USUARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_USUARIO");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("PublicationId", "UserId")
                        .IsUnique();

                    b.ToTable("reaccion_publicacion");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.PublicationTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_ETIQUETA")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_ETIQUETA");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("ESTADO_ETIQUETA")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_ETIQUETA");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NOMBRE_ETIQUETA")
                        .HasAnnotation("Relational:JsonPropertyName", "NOMBRE_ETIQUETA");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("etiqueta_publicacion");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.PublicationTagRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_PUBLICACION_ETIQUETA")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_PUBLICACION_ETIQUETA");

                    b.Property<int>("PublicationId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_PUBLICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_PUBLICACION");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_ETIQUETA")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_ETIQUETA");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("PublicationId", "TagId")
                        .IsUnique();

                    b.ToTable("publicacion_etiqueta");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.PublicationView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_LECTURA")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_LECTURA");

                    b.Property<int>("PublicationId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_PUBLICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_PUBLICACION");

                    b.Property<int?>("ReadingTimeSeconds")
                        .HasColumnType("int")
                        .HasColumnName("TIEMPO_LECTURA_SEGUNDOS")
                        .HasAnnotation("Relational:JsonPropertyName", "TIEMPO_LECTURA_SEGUNDOS");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_USUARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_USUARIO");

                    b.Property<DateTime>("ViewedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_LECTURA")
                        .HasAnnotation("Relational:JsonPropertyName", "FECHA_LECTURA");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("PublicationId", "ViewedAt");

                    b.ToTable("lectura_publicacion");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.QuizAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_RESPUESTA");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TEXTO_RESPUESTA");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("ORDEN_RESPUESTA");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ES_CORRECTA");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_PREGUNTA");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("quiz_answers");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.QuizAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_INTENTO");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_FINALIZACION");

                    b.Property<int>("CorrectAnswers")
                        .HasColumnType("int")
                        .HasColumnName("RESPUESTAS_CORRECTAS");

                    b.Property<int>("IncorrectAnswers")
                        .HasColumnType("int")
                        .HasColumnName("RESPUESTAS_INCORRECTAS");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("PUNTUACION_OBTENIDA");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_INICIO");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ESTADO_INTENTO");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("int")
                        .HasColumnName("TOTAL_PREGUNTAS");

                    b.Property<int>("TotalTimeSeconds")
                        .HasColumnType("int")
                        .HasColumnName("TIEMPO_TOTAL_SEGUNDOS");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_USUARIO");

                    b.HasKey("Id");

                    b.HasIndex("StartedAt");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.ToTable("quiz_attempts");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.QuizCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_CATEGORIA");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_CREACION");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("DESCRIPCION");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("ORDEN_VISUALIZACION");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ICONO");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ESTADO_CATEGORIA");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE_CATEGORIA");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("quiz_categories");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.QuizQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_PREGUNTA");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_CATEGORIA");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_CREACION");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int")
                        .HasColumnName("DIFICULTAD");

                    b.Property<string>("ExplanationText")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("EXPLICACION_RESPUESTA");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ESTADO_PREGUNTA");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_MODIFICACION");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnName("PUNTOS");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("TEXTO_PREGUNTA");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TIPO_PREGUNTA");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IsActive");

                    b.ToTable("quiz_questions");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.QuizUserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_RESPUESTA_USUARIO");

                    b.Property<DateTime>("AnsweredAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_RESPUESTA");

                    b.Property<int>("AttemptId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_INTENTO");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ES_CORRECTA");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_PREGUNTA");

                    b.Property<int>("SelectedAnswerId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_RESPUESTA_SELECCIONADA");

                    b.Property<int>("TimeSpentSeconds")
                        .HasColumnType("int")
                        .HasColumnName("TIEMPO_RESPUESTA_SEGUNDOS");

                    b.HasKey("Id");

                    b.HasIndex("AttemptId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedAnswerId");

                    b.ToTable("quiz_user_answers");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_ROL")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_ROL");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ESTADO_ROL")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_ROL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE_ROL")
                        .HasAnnotation("Relational:JsonPropertyName", "NOMBRE_ROL");

                    b.HasKey("Id");

                    b.ToTable("rol");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.SavedPublication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_GUARDADO")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_GUARDADO");

                    b.Property<int>("PublicationId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_PUBLICACION")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_PUBLICACION");

                    b.Property<DateTime>("SavedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_GUARDADO")
                        .HasAnnotation("Relational:JsonPropertyName", "FECHA_GUARDADO");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_USUARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_USUARIO");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("PublicationId", "UserId")
                        .IsUnique();

                    b.ToTable("publicacion_guardada");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Symptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_SINTOMA")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_SINTOMA");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ESTADO_SINTOMA")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_SINTOMA");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("NOMBRE_SINTOMA")
                        .HasAnnotation("Relational:JsonPropertyName", "NOMBRE_SINTOMA");

                    b.HasKey("Id");

                    b.ToTable("sintoma");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.TypeOfBlood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_TIPOSANGRE")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_TIPOSANGRE");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ESTADO_TIPOSANGRE")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_TIPOSANGRE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("NOMBRE_TIPOSANGRE")
                        .HasAnnotation("Relational:JsonPropertyName", "NOMBRE_TIPOSANGRE");

                    b.HasKey("Id");

                    b.ToTable("tiposangre");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.TypeOfDengue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_TIPODENGUE")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_TIPODENGUE");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ESTADO_TIPODENGUE")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_TIPODENGUE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE_TIPODENGUE")
                        .HasAnnotation("Relational:JsonPropertyName", "NOMBRE_TIPODENGUE");

                    b.HasKey("Id");

                    b.ToTable("tipodengue");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.TypeOfDengueSymptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_TIPODENGUE_SINTOMA")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_TIPODENGUE_SINTOMA");

                    b.Property<int>("SymptomId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_SINTOMA")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_SINTOMA");

                    b.Property<int>("TypeOfDengueId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_TIPODENGUE")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_TIPODENGUE");

                    b.HasKey("Id");

                    b.HasIndex("SymptomId");

                    b.HasIndex("TypeOfDengueId", "SymptomId")
                        .IsUnique();

                    b.ToTable("tipodengue_sintoma");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_USUARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "ID_USUARIO");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DIRECCION_USUARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "DIRECCION_USUARIO");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("FECHA_NACIMIENTO_USUARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "FECHA_NACIMIENTO_USUARIO");

                    b.Property<int>("BloodTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_TIPOSANGRE")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_TIPOSANGRE");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_MUNICIPIO")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_MUNICIPIO");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("CORREO_USUARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "CORREO_USUARIO");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_GENERO")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_GENERO");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("ESTADO_USUARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "ESTADO_USUARIO");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("NOMBRE_USUARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "NOMBRE_USUARIO");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CONTRASENIA_USUARIO")
                        .HasAnnotation("Relational:JsonPropertyName", "CONTRASENIA_USUARIO");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ID_ROL")
                        .HasAnnotation("Relational:JsonPropertyName", "FK_ID_ROL");

                    b.HasKey("Id");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GenreId");

                    b.HasIndex("RoleId");

                    b.ToTable("usuario");

                    b.HasAnnotation("Relational:JsonPropertyName", "USUARIO");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Case", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.PatientState", "CurrentPatientState")
                        .WithMany("CasesWithCurrentState")
                        .HasForeignKey("CurrentPatientStateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend_App_Dengue.Data.Entities.TypeOfDengue", "CurrentTypeOfDengue")
                        .WithMany()
                        .HasForeignKey("CurrentTypeOfDengueId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend_App_Dengue.Data.Entities.Hospital", "Hospital")
                        .WithMany("Cases")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend_App_Dengue.Data.Entities.CaseEvolution", "LastEvolution")
                        .WithMany()
                        .HasForeignKey("LastEvolutionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend_App_Dengue.Data.Entities.User", "MedicalStaff")
                        .WithMany("CasesAsMedicalStaff")
                        .HasForeignKey("MedicalStaffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Backend_App_Dengue.Data.Entities.User", "Patient")
                        .WithMany("CasesAsPatient")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend_App_Dengue.Data.Entities.CaseState", "State")
                        .WithMany("Cases")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend_App_Dengue.Data.Entities.TypeOfDengue", "TypeOfDengue")
                        .WithMany("Cases")
                        .HasForeignKey("TypeOfDengueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CurrentPatientState");

                    b.Navigation("CurrentTypeOfDengue");

                    b.Navigation("Hospital");

                    b.Navigation("LastEvolution");

                    b.Navigation("MedicalStaff");

                    b.Navigation("Patient");

                    b.Navigation("State");

                    b.Navigation("TypeOfDengue");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.CaseEvolution", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.Case", "Case")
                        .WithMany("Evolutions")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_App_Dengue.Data.Entities.User", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend_App_Dengue.Data.Entities.PatientState", "PatientState")
                        .WithMany("CaseEvolutions")
                        .HasForeignKey("PatientStateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend_App_Dengue.Data.Entities.TypeOfDengue", "TypeOfDengue")
                        .WithMany()
                        .HasForeignKey("TypeOfDengueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Doctor");

                    b.Navigation("PatientState");

                    b.Navigation("TypeOfDengue");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Certificate", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.QuizAttempt", "Attempt")
                        .WithOne("Certificate")
                        .HasForeignKey("Backend_App_Dengue.Data.Entities.Certificate", "AttemptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend_App_Dengue.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attempt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.City", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.Department", "Department")
                        .WithMany("Cities")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.FCMToken", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.User", "User")
                        .WithMany("FCMTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Hospital", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.City", "City")
                        .WithMany("Hospitals")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Notification", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Publication", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.PublicationCategory", "Category")
                        .WithMany("Publications")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend_App_Dengue.Data.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend_App_Dengue.Data.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend_App_Dengue.Data.Entities.User", "User")
                        .WithMany("Publications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.PublicationComment", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.PublicationComment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend_App_Dengue.Data.Entities.Publication", "Publication")
                        .WithMany("Comments")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_App_Dengue.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("Publication");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.PublicationReaction", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.Publication", "Publication")
                        .WithMany("Reactions")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_App_Dengue.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publication");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.PublicationTagRelation", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.Publication", "Publication")
                        .WithMany("PublicationTags")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_App_Dengue.Data.Entities.PublicationTag", "Tag")
                        .WithMany("PublicationRelations")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publication");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.PublicationView", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.Publication", "Publication")
                        .WithMany("Views")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_App_Dengue.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publication");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.QuizAnswer", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.QuizQuestion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.QuizAttempt", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.QuizQuestion", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.QuizCategory", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.QuizUserAnswer", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.QuizAttempt", "Attempt")
                        .WithMany("UserAnswers")
                        .HasForeignKey("AttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_App_Dengue.Data.Entities.QuizQuestion", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend_App_Dengue.Data.Entities.QuizAnswer", "SelectedAnswer")
                        .WithMany("UserAnswers")
                        .HasForeignKey("SelectedAnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attempt");

                    b.Navigation("Question");

                    b.Navigation("SelectedAnswer");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.SavedPublication", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.Publication", "Publication")
                        .WithMany("SavedByUsers")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_App_Dengue.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publication");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.TypeOfDengueSymptom", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.Symptom", "Symptom")
                        .WithMany("TypeOfDengueSymptoms")
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_App_Dengue.Data.Entities.TypeOfDengue", "TypeOfDengue")
                        .WithMany("TypeOfDengueSymptoms")
                        .HasForeignKey("TypeOfDengueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Symptom");

                    b.Navigation("TypeOfDengue");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.User", b =>
                {
                    b.HasOne("Backend_App_Dengue.Data.Entities.TypeOfBlood", "BloodType")
                        .WithMany("Users")
                        .HasForeignKey("BloodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend_App_Dengue.Data.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Backend_App_Dengue.Data.Entities.Genre", "Genre")
                        .WithMany("Users")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend_App_Dengue.Data.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BloodType");

                    b.Navigation("City");

                    b.Navigation("Genre");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Case", b =>
                {
                    b.Navigation("Evolutions");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.CaseState", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.City", b =>
                {
                    b.Navigation("Hospitals");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Department", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Genre", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Hospital", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.PatientState", b =>
                {
                    b.Navigation("CaseEvolutions");

                    b.Navigation("CasesWithCurrentState");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Publication", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PublicationTags");

                    b.Navigation("Reactions");

                    b.Navigation("SavedByUsers");

                    b.Navigation("Views");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.PublicationCategory", b =>
                {
                    b.Navigation("Publications");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.PublicationComment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.PublicationTag", b =>
                {
                    b.Navigation("PublicationRelations");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.QuizAnswer", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.QuizAttempt", b =>
                {
                    b.Navigation("Certificate");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.QuizCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.QuizQuestion", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.Symptom", b =>
                {
                    b.Navigation("TypeOfDengueSymptoms");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.TypeOfBlood", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.TypeOfDengue", b =>
                {
                    b.Navigation("Cases");

                    b.Navigation("TypeOfDengueSymptoms");
                });

            modelBuilder.Entity("Backend_App_Dengue.Data.Entities.User", b =>
                {
                    b.Navigation("CasesAsMedicalStaff");

                    b.Navigation("CasesAsPatient");

                    b.Navigation("FCMTokens");

                    b.Navigation("Notifications");

                    b.Navigation("Publications");
                });
#pragma warning restore 612, 618
        }
    }
}
